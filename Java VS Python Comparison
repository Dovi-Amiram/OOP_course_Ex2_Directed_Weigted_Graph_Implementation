''''''Comparing our Java program's performance to our Python program's performance:''''''

In this Project, we tested the run-times, output correctness, and code writing efficiency of this project, with an almost identical project written in Java.

In this test, we tested the run-times and outputs of the following algorithms:

Loading a graph from a json file, saving a graph to a json file, finding the shortest path between two vertices, calculating a TSP route between a set of vertices, and finding a graph's center point.

The tests were performed on three randomly generated graph's, each with 1000 vertices.

'''The testing computer's specs:'''

* i7 intel processor gen 10
* 4 cores
* 8 logical processors
* 16gb RAM

'''The results are as follows:'''

'''''Test conclusions:'''''

First, we need to approach &quot;the elephant in the room&quot;: our Implementation of the TSP algorithm is different in this project, than in the previous Java project.<br />
In the Java project, we Implemented an iterative, greedy algorithm which '''''does not''''' return the ideal result in every scenario, while in the Python project, we learned from our mistakes and fixed the bug. We implemented a recursive, greedy algorithm (meaning we are greedy from the end of the path and not from the beginning of it), which return the desired results.

This of course affected the correctness of the output as well as the integrity of the run-time comparison, since we compared two different algorithms. But have no fear, this discrepancy is yet to be fixed (you have my word!)

When examining the &quot;lighter&quot; algorithms, those which generally take a very short time to execute their task, it's hard to say with any certainty that the one program run's faster than the other, since the margins are so low and can be influenced by a number of different factors (e.g: unrelated processes running in the background).

When looking at the center point algorithm however, which is by far the &quot;heaviest&quot; of them all, we can see a '''big''' difference in performance. The Python program runs a lot slower than the Java one.

'''We did our research'''<ref>https://www.python.org/doc/essays/comparisons/
</ref> '''and this is what we believe is the biggest factor that causes this:'''

''&quot;Python programs are generally expected to run slower than Java programs, but they also take much less time to develop. Python programs are typically 3-5 times shorter than equivalent Java programs. This difference can be attributed to Python's built-in high-level data types and its dynamic typing. For example, a Python programmer wastes no time declaring the types of arguments or variables, and Python's powerful polymorphic list and dictionary types, for which rich syntactic support is built straight into the language, find a use in almost every Python program. Because of the run-time typing, Python's run time must work harder than Java's. For example, when evaluating the expression a+b, it must first inspect the objects a and b to find out their type, which is not known at compile time. It then invokes the appropriate addition operation, which may be an overloaded user-defined method. Java, on the other hand, can perform an efficient integer or floating point addition, but requires variable declarations for a and b, and does not allow overloading of the + operator for instances of user-defined classes.&quot;''

'''What we also learned from this experiment is:'''

''&quot;For these reasons, Python is much better suited as a &quot;glue&quot; language, while Java is better characterized as a low-level implementation language. In fact, the two together make an excellent combination. Components can be developed in Java and combined to form applications in Python; Python can also be used to prototype components until their design can be &quot;hardened&quot; in a Java implementation. To support this type of development, a Python implementation written in Java is under development, which allows calling Python code from Java and vice versa. In this implementation, Python source code is translated to Java bytecode (with help from a run-time library to support Python's dynamic semantics).&quot;''

<references />
